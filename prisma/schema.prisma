generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model Player {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  email      String   @unique
  password   String
  first_name String
  last_name  String
  phone      String?  @unique
  avatar     String?
  in_game    Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  socket_id  String?  @unique

  friends Player[] @relation("Friends")
  friend  Player?  @relation("Friends", fields: [id], references: [id])

  sentFriendRequests     FriendRequest[] @relation("Sender")
  recievedFriendRequests FriendRequest[] @relation("Receiver")

  firstPlayerInGame  Game[] @relation("FirstPlayerInGame")
  secondPlayerInGame Game[] @relation("SecondPlayerInGame")

  firstPlayerInChat  Chat[] @relation("FirstPlayerInChat")
  secondPlayerInChat Chat[] @relation("SecondPlayerInChat")

  playerStats PlayerStats?
  settings    Setting?

  messages Message[] @relation("sender")
}

model PlayerStats {
  id     Int  @id @default(autoincrement())
  wins   Int? @default(0)
  losses Int? @default(0)
  draws  Int? @default(0)

  player   Player @relation(fields: [playerId], references: [id])
  playerId Int    @unique
}

enum FriendRequestStatus {
  pending
  accepted
  rejected
}

model FriendRequest {
  id Int @id @default(autoincrement())

  sender   Player @relation("Sender", fields: [senderId], references: [id])
  senderId Int

  receiver   Player @relation("Receiver", fields: [receiverId], references: [id])
  receiverId Int

  status     FriendRequestStatus @default(pending)
  created_at DateTime            @default(now())
}

model Chat {
  id                  Int      @id @default(autoincrement())
  first_message_index Int      @default(-1)
  last_message_index  Int      @default(-1)
  created_at          DateTime @default(now())

  first_player  Player @relation("FirstPlayerInChat", fields: [firstPlayerId], references: [id])
  firstPlayerId Int

  second_player  Player @relation("SecondPlayerInChat", fields: [secondPlayerId], references: [id])
  secondPlayerId Int

  messages Message[] @relation("belongsToChat")

  game Game?
}

model Message {
  id      Int      @id @default(autoincrement())
  content String
  index   Int
  sent_at DateTime @default(now())

  sender   Player @relation("sender", fields: [senderId], references: [id])
  senderId Int

  belongsToChat Chat @relation("belongsToChat", fields: [chatId], references: [id])
  chatId        Int
}

model Game {
  id Int @id @default(autoincrement())

  first_player  Player @relation("FirstPlayerInGame", fields: [firstPlayerId], references: [id])
  firstPlayerId Int

  second_player  Player @relation("SecondPlayerInGame", fields: [secondPlayerId], references: [id])
  secondPlayerId Int

  started_at   DateTime @default(now())
  last_move_at DateTime @default(now())
  turn         Int      @default(1)
  board        String   @default("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1")

  moves Move[]

  chat   Chat @relation(fields: [chatId], references: [id])
  chatId Int  @unique
}

model Move {
  id Int @id @default(autoincrement())

  game   Game @relation(fields: [gameId], references: [id])
  gameId Int

  player        Int // 1 for first player, 2 for second player
  move_notation String
  played_at     DateTime @default(now())
}

model Setting {
  id Int @id @default(autoincrement())

  player   Player @relation(fields: [playerId], references: [id])
  playerId Int    @unique

  sound_enabled     Boolean @default(true)
  takebacks_enabled Boolean @default(true)
}
