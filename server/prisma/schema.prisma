generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  email      String   @unique
  password   String
  first_name String
  last_name  String
  phone      String
  avatar     String?
  logged_in  Boolean  @default(false)
  in_game    Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  ip_address String

  friends  Player[] @relation("Friends")
  friend   Player?  @relation("Friends", fields: [playerId], references: [id])
  playerId Int?

  sentFriendRequests     FriendRequest[] @relation("Sender")
  recievedFriendRequests FriendRequest[] @relation("Receiver")

  firstPlayerInGame  Game[] @relation("FirstPlayerInGame")
  secondPlayerInGame Game[] @relation("SecondPlayerInGame")

  firstPlayerInChat  Chat[] @relation("FirstPlayerInChat")
  secondPlayerInChat Chat[] @relation("SecondPlayerInChat")

  playerStats PlayerStats?
  settings    Setting?
}

model PlayerStats {
  id     Int  @id @default(autoincrement())
  wins   Int? @default(0)
  losses Int? @default(0)
  draws  Int? @default(0)

  player   Player @relation(fields: [playerId], references: [id])
  playerId Int    @unique
}

enum FriendRequestStatus {
  pending
  accepted
  rejected
}

model FriendRequest {
  id Int @id @default(autoincrement())

  sender   Player @relation("Sender", fields: [senderId], references: [id])
  senderId Int

  receiver   Player @relation("Receiver", fields: [receiverId], references: [id])
  receiverId Int

  status     FriendRequestStatus @default(pending)
  created_at DateTime            @default(now())
}

model Chat {
  id Int @id @default(autoincrement())

  first_player  Player @relation("FirstPlayerInChat", fields: [firstPlayerId], references: [id])
  firstPlayerId Int

  second_player  Player @relation("SecondPlayerInChat", fields: [secondPlayerId], references: [id])
  secondPlayerId Int

  first_message  Message @relation("firstMessageInChat", fields: [firstMessageId], references: [id])
  firstMessageId Int     @unique

  messages Message[] @relation("belongsToChat")

  created_at DateTime @default(now())

  game Game?
}

model Message {
  id      Int    @id @default(autoincrement())
  content String

  index   Int
  sent_at DateTime @default(now())

  sender FirstOrSecondPlayer

  previous_message  Message  @relation("previous_message", fields: [previousMessageId], references: [id])
  previousMessageId Int      @unique
  previousMessage   Message? @relation("previous_message")

  next_message  Message  @relation("next_message", fields: [nextMessageId], references: [id])
  nextMessageId Int      @unique
  nextMessage   Message? @relation("next_message")

  firstMessageInChat Chat? @relation("firstMessageInChat")

  belongsToChat   Chat @relation("belongsToChat", fields: [belongsToChatId], references: [id])
  belongsToChatId Int
}

enum GameStatus {
  ongoing
  draw
  first_player_won
  second_player_won
}

enum FirstOrSecondPlayer {
  first_player
  second_player
}

model Game {
  id Int @id @default(autoincrement())

  first_player  Player @relation("FirstPlayerInGame", fields: [firstPlayerId], references: [id])
  firstPlayerId Int

  second_player  Player @relation("SecondPlayerInGame", fields: [secondPlayerId], references: [id])
  secondPlayerId Int

  total_time        Int
  created_at        DateTime            @default(now())
  updated_at        DateTime            @default(now())
  takebacks_enabled Boolean
  game_status       GameStatus          @default(ongoing)
  turn              FirstOrSecondPlayer

  moves Move[]

  chat   Chat @relation(fields: [chatId], references: [id])
  chatId Int  @unique
}

model Move {
  id Int @id @default(autoincrement())

  game   Game @relation(fields: [gameId], references: [id])
  gameId Int

  player        FirstOrSecondPlayer
  move_notation String
  move_index    Int
  created_at    DateTime            @default(now())
}

model Setting {
  id Int @id @default(autoincrement())

  player   Player @relation(fields: [playerId], references: [id])
  playerId Int    @unique

  sound_enabled     Boolean @default(true)
  takebacks_enabled Boolean @default(true)
}
